{"version":3,"sources":["api/getDataFromUrl.js","Person.js","PeopleTable.js","App.js","api/peopleUrl.js","index.js"],"names":["getDataFromUrl","url","responsePromise","data","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","json","abrupt","stop","classNames","require","Person","_ref","person","selectedPerson","setSelectedPerson","react_default","createElement","className","Person--male","sex","Person--female","concat","century","Person--selected","id","onClick","born-before-1650","born","name","died","mother","father","lived-for-65-and-more","age","PeopleTable","people","setPeople","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","filterBy","setFilterBy","length","getSortedPeople","sortBY","typeOfSortedData","toConsumableArray","sort","b","localeCompare","Fragment","placeholder","type","onChange","event","target","value","toLowerCase","filter","includes","map","src_Person","key","App","peopleFromServer","index","objectSpread2","src_PeopleTable","Math","ceil","ReactDOM","render","src_App_0","test","document","getElementById"],"mappings":"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","file":"static/js/main.594b7acb.chunk.js","sourcesContent":["const getDataFromUrl = async(url) => {\n  const responsePromise = await fetch(url);\n  const data = await responsePromise.json();\n\n  return data;\n};\n\nexport default getDataFromUrl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst classNames = require('classnames');\n\nconst Person = ({ person, selectedPerson, setSelectedPerson }) => (\n  <tr\n    /* tabIndex=\"0\" */\n    className={\n      classNames(\n        [{ 'Person--male': person.sex === 'm' },\n          { 'Person--female': person.sex === 'f' },\n          `Person--lived-in-${person.century}`,\n          'Person',\n          { 'Person--selected': selectedPerson === person.id },\n        ]\n      )\n    }\n    onClick={() => {\n      setSelectedPerson(person.id);\n    }}\n    /* onBlur={()=>{setSelectedPerson(0)}} */\n  >\n    <td className=\"PeopleTable__description\">{person.id}</td>\n    <td className={classNames([{ 'born-before-1650': person.born < 1650 }])}>\n      {person.name}\n    </td>\n    <td className=\"PeopleTable__description\">{person.sex}</td>\n    <td className=\"PeopleTable__description\">{person.born}</td>\n    <td className=\"PeopleTable__description\">{person.died}</td>\n    <td className=\"PeopleTable__description\">{person.mother}</td>\n    <td className=\"PeopleTable__description\">{person.father}</td>\n    <td className={classNames(\n      [{ 'lived-for-65-and-more': person.age >= 65 },\n        'PeopleTable__description']\n    )}\n    >\n      {person.age}\n    </td>\n    <td className={classNames(['PeopleTable__description'])}>\n      {person.century}\n    </td>\n  </tr>\n);\n\nPerson.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    sex: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    died: PropTypes.number.isRequired,\n    mother: PropTypes.string,\n    father: PropTypes.string,\n    century: PropTypes.number.isRequired,\n    age: PropTypes.number.isRequired,\n  }).isRequired,\n  selectedPerson: PropTypes.number.isRequired,\n  setSelectedPerson: PropTypes.func.isRequired,\n};\n\nexport default Person;\n","import React, { useState } from 'react';\nimport Person from './Person';\n\nconst PeopleTable = ({ people, setPeople }) => {\n  const [selectedPerson, setSelectedPerson] = useState(0);\n  const [filterBy, setFilterBy] = useState('');\n\n  if (people.length > 0) {\n    const getSortedPeople = (sortBY, typeOfSortedData) => {\n      const getSortMethod = () => {\n        if (typeOfSortedData === 'number'\n        || typeOfSortedData === 'boolean') {\n          return (a, b) => a[sortBY] - b[sortBY];\n        }\n\n        if (typeOfSortedData === 'string') {\n          return (a, b) => a[sortBY].localeCompare(b[sortBY]);\n        }\n\n        return '';\n      };\n\n      return [...people].sort(\n        getSortMethod()\n      );\n    };\n\n    return (\n      <>\n        <input\n          placeholder=\"type for filtering\"\n          type=\"text\"\n          className=\"input input_search-in-table\"\n          onChange={(event) => {\n            setFilterBy(event.target.value.toLowerCase());\n          }}\n        />\n        <table className=\"PeopleTable\">\n          <thead className=\"PeopleTable__head\">\n            <tr className=\"PeopleTable__row\">\n              <th\n                onClick={() => {\n                  setPeople(getSortedPeople('id', 'number'));\n                }}\n                className=\"PeopleTable__heading\"\n              >\n              id\n              </th>\n              <th\n                onClick={() => {\n                  setPeople(getSortedPeople('name', 'string'));\n                }}\n                className=\"PeopleTable__heading\"\n              >\n              name\n              </th>\n              <th\n                onClick={() => {\n                  setPeople(getSortedPeople('sex', 'string'));\n                }}\n                className=\"PeopleTable__heading\"\n              >\n              sex\n              </th>\n              <th\n                onClick={() => {\n                  setPeople(getSortedPeople('born', 'number'));\n                }}\n                className=\"PeopleTable__heading\"\n              >\n              born\n              </th>\n              <th\n                onClick={() => {\n                  setPeople(getSortedPeople('died', 'number'));\n                }}\n                className=\"PeopleTable__heading\"\n              >\n              died\n              </th>\n              <th className=\"PeopleTable__heading\">mother</th>\n              <th className=\"PeopleTable__heading\">father</th>\n              <th\n                onClick={() => {\n                  setPeople(getSortedPeople('age', 'number'));\n                }}\n                className=\"PeopleTable__heading\"\n              >\n              age\n              </th>\n              <th\n                onClick={() => {\n                  setPeople(getSortedPeople('century', 'number'));\n                }}\n                className=\"PeopleTable__heading\"\n              >\ncentury\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"PeopleTable__body\">\n            {people\n              .filter(\n                person => (person.name + person.mother + person.father)\n                  .toLowerCase().includes(filterBy)\n              )\n              .map(\n                person => (\n                  <Person\n                    person={person}\n                    key={person.id}\n                    selectedPerson={selectedPerson}\n                    setSelectedPerson={setSelectedPerson}\n                  />\n                )\n              )}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n\n  return '';\n};\n\nexport default PeopleTable;\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport peopleUrl from './api/peopleUrl';\nimport getDataFromUrl from './api/getDataFromUrl';\nimport PeopleTable from './PeopleTable';\n\nconst App = () => {\n  const [people, setPeople] = useState([]);\n\n  if (people.length === 0) {\n    (async() => {\n      const peopleFromServer = await getDataFromUrl(peopleUrl);\n\n      setPeople(\n        peopleFromServer.map(\n          (person, index) => ({\n            ...person, id: index + 1,\n          })\n        )\n      );\n    })();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>People table</h1>\n      <p>\n        {' '}\nnumber of currently visible people\n        {people.length}\n      </p>\n      <PeopleTable\n        people={\n          people\n            .map(\n              person => ({\n                ...person,\n                age: person.died - person.born,\n                century: Math.ceil(person.died / 100),\n              })\n            )\n        }\n        setPeople={setPeople}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// eslint-disable-next-line max-len\nconst peopleUrl = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport default peopleUrl;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App test={123} />, document.getElementById('root'));\n"],"sourceRoot":""}